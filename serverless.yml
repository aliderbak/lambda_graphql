service: simpleApp
custom:
    tableName: 'coustomer_data${self:provider.stage}'
    authorizerId: ${file(./secrets-${self:provider.stage}.json):AuthorizerId}
provider:
    name: aws
    runtime: python3.8
    region: ${file(./secrets.json):DefaultRegion}
    stage: ${file(./secrets.json):Stage}
    
    deploymentBucket:
        blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
        skipPolicySetup: false # Prevents creation of default bucket policy when framework creates the deployment bucket. Default is false
        name: ${file(./secrets.json):DeploymentBucketName} # Deployment bucket name. Default is generated by the framework
        maxPreviousDeploymentArtifacts: 5 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5
        versioning: false # enable bucket versioning. Default is false
        serverSideEncryption: AES256 # server-side encryption method
    memorySize: 1280
    timeout: 30
    lambdaHashingVersion: '20201221'
    environment:
        STAGE: ${self:provider.stage}  
        TABLE_NAME: ${self:custom.tableName}  
        
    role: ${file(./secrets.json):LambdaRole}
    apiGateway:
      restApiId:
        "Fn::ImportValue": SharedGW-restApiId-${self:provider.stage}
      restApiRootResourceId:
        "Fn::ImportValue": SharedGW-rootResourceId-${self:provider.stage}
package:
    patterns:
        - '!./**'
        #- 'dist/**'
    individually: true
functions:
    getDataGraphql: 
        layers:
        # graphene is not supported by aws 
          - arn:aws:lambda:eu-west-1:770693421928:layer:Klayers-python38-graphene:2
        handler: src/main.run
        package:
            patterns:
                - '!./**'
                - src/main.py
        events:
            - http:
                path: user/graphql
                method: get
                cors:
                    origin: "*"
                    headers:
                        - Content-Type
                        - X-Amz-Date
                        - Authorization
                        - X-Api-Key
                        - X-Amz-Security-Token
                        - X-Amz-User-Agent
                authorizer:
                    type: COGNITO_USER_POOLS
                    authorizerId: ${self:custom.authorizerId}
                    claims:
                        - "custom:user_id"
                integration: lambda
    getDataWithoutGraphql: 
        
        handler: src/without_graphql.run
        package:
            patterns:
                - '!./**'
                - src/without_graphql.py
        events:
            - http:
                path: user
                method: get
                cors:
                    origin: "*"
                    headers:
                        - Content-Type
                        - X-Amz-Date
                        - Authorization
                        - X-Api-Key
                        - X-Amz-Security-Token
                        - X-Amz-User-Agent
                authorizer:
                    type: COGNITO_USER_POOLS
                    authorizerId: ${self:custom.authorizerId}
                    claims:
                        - "custom:user_id"
                integration: lambda
    